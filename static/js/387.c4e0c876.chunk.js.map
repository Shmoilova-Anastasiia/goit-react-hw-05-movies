{"version":3,"file":"static/js/387.c4e0c876.chunk.js","mappings":"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","sources":["Api/movies.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: `80849c20aa63241eb028c4e7b7d0f3a8`,\n  include_adult: false,\n};\nexport const fetchTrendingMovies = async (page = 1, lng) => {\n  try {\n    const { data } = await axios.get('/trending/movie/day', {\n      params: {\n        page,\n        language: ' en - US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    alert('Oops, there is no movies');\n  }\n};\n\nexport const fetchSearchMovies = async (query = '', page = 1) => {\n  try {\n    const { data } = await axios.get(`/search/movie`, {\n      params: {\n        language: 'en-US',\n        page,\n        query,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    alert('Oops, there is no movie');\n  }\n};\n\nexport const fetchMovieDetails = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}`, {\n      params: {\n        language: 'en-US',\n      },\n    });\n    return data;\n  } catch (error) {\n    alert('Oops, there is no movie with that name');\n  }\n};\n\nexport const fetchMovieCast = async id => {\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits`, {\n      params: {\n        language: 'en-US',\n      },\n    });\n    return data.cast;\n  } catch (error) {\n    alert('Oops, there is no cast movie');\n  }\n};\n\nexport const fetchMovieReviews = async (id, page = 1) => {\n  try {\n    const { data } = await axios.get(\n      `/movie/${id}/reviews\n`,\n      {\n        params: {\n          language: 'en-US',\n        },\n      }\n    );\n    return data.results;\n  } catch (error) {\n    alert('Oops, we don`t have any reviews');\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderStyle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  margin: 15px auto;\n`;\n","import { ThreeCircles } from 'react-loader-spinner';\nimport { LoaderStyle } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderStyle>\n      <ThreeCircles\n        height=\"100\"\n        width=\"100\"\n        color=\"rgba(0, 255, 0, 1)\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        middleCircleColor=\"\"\n      />\n    </LoaderStyle>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  list-style: none;\n  margin-bottom: 40px;\n`;\n\nexport const ItemReviews = styled.li`\n  margin-bottom: 20px;\n  border-bottom: 1px solid rgb(78, 116, 193);\n`;\n\nexport const TitleReviews = styled.h3`\n  color: rgb(255, 89, 0);\n  font-size: 28px;\n  margin-top: 6px;\n  margin-bottom: 10px;\n`;\n\nexport const ErrorReviews = styled.p`\n  color: #fff;\n  font-size: 26px;\n  text-align: center;\n  font-weight: 300;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const TextReviews = styled.p`\n  color: #fff;\n  font-size: 14px;\n  font-weight: 300;\n  margin-bottom: 14px;\n`;\n\nexport const DateReviews = styled.span`\n  color: #fff;\n  font-size: 10px;\n  font-weight: 300;\n  margin-bottom: 14px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'Api/movies';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  ListReviews,\n  ItemReviews,\n  TitleReviews,\n  ErrorReviews,\n  TextReviews,\n  DateReviews,\n} from './Reviews.styled';\n\nconst pageStatus = {\n  INIT: 'init',\n  LOADING: 'loading',\n  SUCCESS: 'success',\n  ERROR: 'error',\n};\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [status, setStatus] = useState(pageStatus.INIT);\n\n  const params = useParams();\n  const id = params.movieId;\n\n  useEffect(() => {\n    setStatus(pageStatus.LOADING);\n    const getData = async () => {\n      try {\n        const data = await fetchMovieReviews(id);\n        setReviews(data);\n        setStatus(pageStatus.SUCCESS);\n      } catch (error) {\n        setStatus(pageStatus.ERROR);\n      }\n    };\n    getData();\n  }, [id]);\n\n  const getPostDate = date => {\n    const options = {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      timezone: 'UTC',\n    };\n\n    return new Date(date).toLocaleString('en', options);\n  };\n\n  return (\n    <>\n      {status === pageStatus.ERROR && (\n        <ErrorReviews>ERROR, REVIEWS NOT FOUND</ErrorReviews>\n      )}\n\n      {(status === pageStatus.LOADING || status === pageStatus.INIT) && (\n        <Loader />\n      )}\n\n      {status === pageStatus.SUCCESS && reviews.length === 0 && (\n        <ErrorReviews>REVIEWS NOT FOUND</ErrorReviews>\n      )}\n\n      {status === pageStatus.SUCCESS && (\n        <ListReviews>\n          {reviews?.map(item => (\n            <ItemReviews key={item.id}>\n              <TitleReviews>{item.author}</TitleReviews>\n              <TextReviews>{item.content}</TextReviews>\n              <DateReviews>{getPostDate(item.updated_at)}</DateReviews>\n            </ItemReviews>\n          ))}\n        </ListReviews>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n"],"names":["axios","api_key","include_adult","fetchTrendingMovies","page","params","language","data","results","alert","fetchSearchMovies","query","fetchMovieDetails","id","fetchMovieCast","cast","fetchMovieReviews","LoaderStyle","styled","Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","ListReviews","ItemReviews","TitleReviews","ErrorReviews","TextReviews","DateReviews","pageStatus","useState","reviews","setReviews","status","setStatus","useParams","movieId","useEffect","getData","length","map","item","author","content","date","updated_at","Date","toLocaleString","year","month","day","timezone"],"sourceRoot":""}